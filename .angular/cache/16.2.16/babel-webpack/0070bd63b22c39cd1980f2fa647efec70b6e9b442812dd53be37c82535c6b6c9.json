{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClimaService = /*#__PURE__*/(() => {\n  class ClimaService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.apiKey = environment.apiKey;\n    }\n    /**\r\n     * Busca o clima atual de uma cidade\r\n     * @param cidade Nome da cidade para buscar o clima\r\n     */\n    getClimaAtual(cidade) {\n      const url = `${this.apiUrl}/weather?q=${cidade}&units=metric&lang=pt_br&appid=${this.apiKey}`;\n      return this.http.get(url).pipe(map(response => ({\n        cidade: response.name,\n        temperatura: response.main.temp,\n        descricao: response.weather[0].description,\n        icone: response.weather[0].icon,\n        umidade: response.main.humidity,\n        pressao: response.main.pressure,\n        velocidadeVento: response.wind.speed,\n        direcaoVento: response.wind.deg,\n        sensacaoTermica: response.main.feels_like,\n        tempMin: response.main.temp_min,\n        tempMax: response.main.temp_max,\n        visibilidade: response.visibility / 1000,\n        data: new Date()\n      })));\n    }\n    /**\r\n     * Busca a previsão do tempo para 5 dias\r\n     * @param cidade Nome da cidade para buscar a previsão\r\n     */\n    getPrevisao5Dias(cidade) {\n      const url = `${this.apiUrl}/forecast?q=${cidade}&units=metric&lang=pt_br&appid=${this.apiKey}`;\n      return this.http.get(url).pipe(map(response => {\n        // Filtra apenas uma previsão por dia (a do meio-dia)\n        const previsoes = response.list.filter(item => item.dt_txt.includes('12:00:00')).map(item => ({\n          data: new Date(item.dt * 1000),\n          temperatura: item.main.temp,\n          descricao: item.weather[0].description,\n          icone: item.weather[0].icon,\n          probabilidadeChuva: item.pop * 100,\n          umidade: item.main.humidity\n        }));\n        return previsoes;\n      }));\n    }\n    /**\r\n     * Busca o clima por geolocalização\r\n     * @param lat Latitude\r\n     * @param lon Longitude\r\n     */\n    getClimaPorGeolocalizacao(lat, lon) {\n      const url = `${this.apiUrl}/weather?lat=${lat}&lon=${lon}&units=metric&lang=pt_br&appid=${this.apiKey}`;\n      return this.http.get(url).pipe(map(response => ({\n        cidade: response.name,\n        temperatura: response.main.temp,\n        descricao: response.weather[0].description,\n        icone: response.weather[0].icon,\n        umidade: response.main.humidity,\n        pressao: response.main.pressure,\n        velocidadeVento: response.wind.speed,\n        direcaoVento: response.wind.deg,\n        sensacaoTermica: response.main.feels_like,\n        tempMin: response.main.temp_min,\n        tempMax: response.main.temp_max,\n        visibilidade: response.visibility / 1000,\n        data: new Date()\n      })));\n    }\n    static {\n      this.ɵfac = function ClimaService_Factory(t) {\n        return new (t || ClimaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ClimaService,\n        factory: ClimaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ClimaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}