{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/fabio/Desktop/Projetos de Marlon Desenvolvimento Mobile/climaja-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n/**\n * Componente para a página inicial do aplicativo.\n */\nlet HomePage = class HomePage {\n  /**\n   * Construtor do componente.\n   * @param climaService Serviço para buscar dados do clima.\n   * @param historicoService Serviço para gerenciar o histórico de buscas.\n   * @param localizacaoService Serviço para gerenciar a localização atual.\n   * @param router Serviço para navegar entre as páginas.\n   * @param loadingController Controlador para exibir o indicador de carregamento.\n   * @param alertController Controlador para exibir mensagens de alerta.\n   */\n  constructor(climaService, historicoService, localizacaoService, router, loadingController, alertController) {\n    this.climaService = climaService;\n    this.historicoService = historicoService;\n    this.localizacaoService = localizacaoService;\n    this.router = router;\n    this.loadingController = loadingController;\n    this.alertController = alertController;\n    /**\n     * Cidade a ser buscada.\n     */\n    this.cidade = '';\n    /**\n     * Sugestões de cidades para a busca.\n     */\n    this.sugestoes = [];\n    /**\n     * Dados do clima atual da cidade buscada.\n     */\n    this.climaAtual = null;\n    /**\n     * Indica se a aplicação está carregando dados.\n     */\n    this.carregando = false;\n    /**\n     * Mensagem de erro a ser exibida.\n     */\n    this.erro = '';\n    /**\n     * Subject para controlar a busca de sugestões.\n     */\n    this.searchTerm = new Subject();\n  }\n  /**\n   * Método chamado quando o componente é inicializado.\n   */\n  ngOnInit() {\n    // Configura o searchTerm para buscar sugestões após um período de inatividade\n    this.searchTerm.pipe(distinctUntilChanged() // Emite apenas se o valor for diferente do anterior\n    ).subscribe(value => {\n      this.buscarSugestoes(value);\n    });\n  }\n  /**\n   * Busca os dados do clima para a cidade especificada.\n   */\n  buscarClima() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Método buscarClima() chamado!');\n      console.log('Cidade:', _this.cidade);\n      // Verifica se a cidade foi informada\n      if (!_this.cidade || !_this.cidade.trim()) {\n        _this.mostrarErro('Por favor, digite o nome de uma cidade');\n        return;\n      }\n      _this.carregando = true;\n      _this.erro = '';\n      _this.climaAtual = null;\n      try {\n        _this.sugestoes = [];\n        // Busca os dados do clima no serviço\n        _this.climaService.getClima(_this.cidade.trim()).subscribe({\n          next: clima => {\n            console.log('Dados do clima recebidos:', clima);\n            _this.climaAtual = clima;\n            // Salva no histórico usando o serviço\n            _this.historicoService.adicionarHistorico({\n              cidade: clima.name || _this.cidade,\n              temperatura: clima.main.temp,\n              descricao: clima.weather[0].description,\n              data: new Date().toISOString(),\n              icone: clima.weather[0].icon\n            });\n            _this.carregando = false;\n            console.log('Busca concluída com sucesso');\n            // Navega para a página de detalhes do clima, passando a cidade como parâmetro\n            _this.router.navigate(['/detalhes-clima'], {\n              queryParams: {\n                cidade: clima.name || _this.cidade\n              }\n            });\n          },\n          error: error => {\n            console.error('Erro ao buscar clima:', error);\n            _this.erro = 'Cidade não encontrada. Verifique o nome e tente novamente.';\n            _this.carregando = false;\n            _this.climaAtual = null;\n          }\n        });\n      } catch (error) {\n        console.error('Erro inesperado:', error);\n        _this.erro = 'Erro inesperado. Tente novamente.';\n        _this.carregando = false;\n        _this.climaAtual = null;\n      }\n    })();\n  }\n  /**\n   * Navega para a página de detalhes do clima.\n   */\n  verDetalhes(clima) {\n    this.router.navigate(['/detalhes-clima'], {\n      queryParams: {\n        cidade: clima.name\n      }\n    });\n  }\n  /**\n   * Exibe uma mensagem de erro.\n   * @param mensagem Mensagem de erro a ser exibida.\n   */\n  mostrarErro(mensagem) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this2.alertController.create({\n        header: 'Erro',\n        message: mensagem,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  /**\n   * Obtém a URL do ícone do clima.\n   * @param icone Código do ícone do clima.\n   * @returns URL do ícone do clima.\n   */\n  getIconeClima(icone) {\n    return `https://openweathermap.org/img/wn/${icone}@2x.png`;\n  }\n  /**\n   * Manipula a entrada de busca e gera sugestões.\n   * @param event Evento de entrada de texto.\n   */\n  onSearchInput(event) {\n    const value = event.target.value;\n    this.searchTerm.next(value);\n  }\n  /**\n   * Busca sugestões de cidades com base no texto digitado.\n   * @param cidade Texto digitado para buscar sugestões.\n   */\n  buscarSugestoes(cidade) {\n    if (cidade.trim() === '') {\n      this.sugestoes = [];\n      return;\n    }\n    this.climaService.getSugestoes(cidade).subscribe({\n      next: sugestoes => {\n        this.sugestoes = sugestoes.map(sugestao => `${sugestao.name}, ${sugestao.country}`);\n      },\n      error: error => {\n        console.error('Erro ao buscar sugestões:', error);\n        this.sugestoes = [];\n      }\n    });\n  }\n  /**\n   * Seleciona uma sugestão da lista.\n   * @param sugestao Sugestão selecionada.\n   */\n  selecionarSugestao(sugestao) {\n    this.cidade = sugestao;\n    this.buscarClima();\n  }\n  /**\n   * Atualiza a cidade com o valor digitado no campo de busca.\n   * @param event Evento de entrada de texto.\n   */\n  onInputChange(event) {\n    this.cidade = event.target.value;\n  }\n  /**\n   * Permite a busca ao pressionar a tecla \"Enter\".\n   * @param event Evento de teclado.\n   */\n  onKeyPress(event) {\n    console.log('onKeyPress chamado!');\n    if (event.key === 'Enter') {\n      this.buscarClima();\n    }\n  }\n  /**\n   * Define a localização atual com base no clima atual.\n   */\n  definirLocalizacaoAtual() {\n    if (this.climaAtual) {\n      this.localizacaoService.definirLocalizacaoAtual(this.climaAtual.name);\n      console.log('Localização atual definida:', this.climaAtual.name);\n    } else {\n      this.mostrarErro('Por favor, busque por uma cidade primeiro.');\n    }\n  }\n};\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss']\n})], HomePage);\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}