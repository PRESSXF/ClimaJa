{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/clima.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@ionic/angular\";\nfunction MapasPage_ion_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-button\", 20);\n    i0.ɵɵlistener(\"click\", function MapasPage_ion_button_18_Template_ion_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const layer_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.changeLayer(layer_r3.key));\n    });\n    i0.ɵɵelement(1, \"ion-icon\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const layer_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fill\", ctx_r0.currentLayer === layer_r3.key ? \"solid\" : \"outline\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", layer_r3.icon);\n  }\n}\nfunction MapasPage_div_24_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"div\", 28);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Temperatura (\\u00B0C)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MapasPage_div_24_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"div\", 29);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Precipita\\u00E7\\u00E3o (mm)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MapasPage_div_24_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"div\", 30);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Press\\u00E3o (hPa)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MapasPage_div_24_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"div\", 31);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Vento (m/s)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MapasPage_div_24_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"div\", 32);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Nuvens (%)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction MapasPage_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23);\n    i0.ɵɵelement(2, \"ion-icon\", 24);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4, \"Legenda\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 25);\n    i0.ɵɵtemplate(6, MapasPage_div_24_div_6_Template, 4, 0, \"div\", 26);\n    i0.ɵɵtemplate(7, MapasPage_div_24_div_7_Template, 4, 0, \"div\", 26);\n    i0.ɵɵtemplate(8, MapasPage_div_24_div_8_Template, 4, 0, \"div\", 26);\n    i0.ɵɵtemplate(9, MapasPage_div_24_div_9_Template, 4, 0, \"div\", 26);\n    i0.ɵɵtemplate(10, MapasPage_div_24_div_10_Template, 4, 0, \"div\", 26);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentLayer === \"temp\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentLayer === \"precipitation\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentLayer === \"pressure\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentLayer === \"wind\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.currentLayer === \"clouds\");\n  }\n}\nfunction MapasPage_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵelement(1, \"ion-spinner\", 34);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3, \"Carregando mapa...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n// Corrigir ícones do Leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'assets/leaflet/marker-icon-2x.png',\n  iconUrl: 'assets/leaflet/marker-icon.png',\n  shadowUrl: 'assets/leaflet/marker-shadow.png'\n});\nlet MapasPage = /*#__PURE__*/(() => {\n  class MapasPage {\n    constructor(climaService) {\n      this.climaService = climaService;\n      this.currentLayer = 'temp';\n      // Opções de camadas meteorológicas\n      this.layerOptions = [{\n        key: 'temp',\n        name: 'Temperatura',\n        icon: 'thermometer-outline'\n      }, {\n        key: 'precipitation',\n        name: 'Precipitação',\n        icon: 'rainy-outline'\n      }, {\n        key: 'pressure',\n        name: 'Pressão',\n        icon: 'speedometer-outline'\n      }, {\n        key: 'wind',\n        name: 'Vento',\n        icon: 'flag-outline'\n      }, {\n        key: 'clouds',\n        name: 'Nuvens',\n        icon: 'cloud-outline'\n      }];\n    }\n    ngAfterViewInit() {\n      // Aguardar um pouco para garantir que o DOM esteja pronto\n      setTimeout(() => {\n        this.initMap();\n      }, 100);\n    }\n    ngOnDestroy() {\n      if (this.map) {\n        this.map.remove();\n      }\n    }\n    initMap() {\n      try {\n        // Inicializar o mapa centrado no Brasil\n        this.map = L.map('map', {\n          center: [-15.7942, -47.8822],\n          zoom: 5,\n          zoomControl: true,\n          attributionControl: true\n        });\n        // Camada base OpenStreetMap\n        const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18\n        });\n        baseLayer.addTo(this.map);\n        // Adicionar camada meteorológica inicial\n        this.addWeatherLayer(this.currentLayer);\n        // Adicionar alguns marcadores de exemplo para cidades importantes\n        this.addCityMarkers();\n        // Forçar redimensionamento do mapa\n        setTimeout(() => {\n          if (this.map) {\n            this.map.invalidateSize();\n          }\n        }, 200);\n      } catch (error) {\n        console.error('Erro ao inicializar o mapa:', error);\n      }\n    }\n    addWeatherLayer(layerType) {\n      if (!this.map) return;\n      // Remover camada anterior se existir\n      if (this.weatherLayer) {\n        this.map.removeLayer(this.weatherLayer);\n      }\n      // URLs das camadas meteorológicas do OpenWeatherMap\n      const layerUrls = {\n        temp: 'temp_new',\n        precipitation: 'precipitation_new',\n        pressure: 'pressure_new',\n        wind: 'wind_new',\n        clouds: 'clouds_new'\n      };\n      const layerUrl = layerUrls[layerType] || 'temp_new';\n      // Usar a API do OpenWeatherMap para camadas meteorológicas\n      this.weatherLayer = L.tileLayer(`https://tile.openweathermap.org/map/${layerUrl}/{z}/{x}/{y}.png?appid=0493ba0aca663cf9a780f6bf65b6af69`, {\n        opacity: 0.6,\n        attribution: 'Dados meteorológicos © <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\n        maxZoom: 18\n      });\n      this.weatherLayer.addTo(this.map);\n    }\n    addCityMarkers() {\n      if (!this.map) return;\n      const cities = [{\n        name: 'São Paulo',\n        lat: -23.5505,\n        lng: -46.6333\n      }, {\n        name: 'Rio de Janeiro',\n        lat: -22.9068,\n        lng: -43.1729\n      }, {\n        name: 'Brasília',\n        lat: -15.7942,\n        lng: -47.8822\n      }, {\n        name: 'Salvador',\n        lat: -12.9714,\n        lng: -38.5014\n      }, {\n        name: 'Fortaleza',\n        lat: -3.7319,\n        lng: -38.5267\n      }, {\n        name: 'Belo Horizonte',\n        lat: -19.9191,\n        lng: -43.9386\n      }, {\n        name: 'Manaus',\n        lat: -3.1190,\n        lng: -60.0217\n      }, {\n        name: 'Curitiba',\n        lat: -25.4284,\n        lng: -49.2733\n      }];\n      cities.forEach(city => {\n        const marker = L.marker([city.lat, city.lng]).bindPopup(`<b>${city.name}</b><br>Clique para ver o clima`).on('click', () => {\n          this.showCityWeather(city.name);\n        });\n        marker.addTo(this.map);\n      });\n    }\n    showCityWeather(cityName) {\n      // Implementar popup com informações do clima da cidade\n      console.log(`Mostrando clima para: ${cityName}`);\n    }\n    changeLayer(layerType) {\n      this.currentLayer = layerType;\n      this.addWeatherLayer(layerType);\n    }\n    getCurrentLayerName() {\n      const layer = this.layerOptions.find(l => l.key === this.currentLayer);\n      return layer ? layer.name : 'Temperatura';\n    }\n    zoomToBrazil() {\n      if (this.map) {\n        this.map.setView([-15.7942, -47.8822], 5);\n      }\n    }\n    getCurrentLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lat = position.coords.latitude;\n          const lng = position.coords.longitude;\n          if (this.map) {\n            this.map.setView([lat, lng], 10);\n            L.marker([lat, lng]).bindPopup('Sua localização atual').addTo(this.map).openPopup();\n          }\n        }, error => {\n          console.error('Erro ao obter localização:', error);\n        });\n      }\n    }\n    static {\n      this.ɵfac = function MapasPage_Factory(t) {\n        return new (t || MapasPage)(i0.ɵɵdirectiveInject(i1.ClimaService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapasPage,\n        selectors: [[\"app-mapas\"]],\n        decls: 27,\n        vars: 6,\n        consts: [[1, \"custom-header\", 3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/home\"], [1, \"header-title\"], [\"name\", \"map-outline\", 1, \"header-icon\"], [\"slot\", \"end\"], [\"fill\", \"clear\", 3, \"click\"], [\"name\", \"locate-outline\"], [1, \"maps-content\", 3, \"fullscreen\"], [1, \"layer-controls\", \"glass-effect\"], [1, \"layer-header\"], [\"name\", \"layers-outline\"], [1, \"layer-buttons\"], [\"size\", \"small\", \"class\", \"layer-btn\", 3, \"fill\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"navigation-controls\", \"glass-effect\"], [\"fill\", \"clear\", 1, \"nav-btn\", 3, \"click\"], [\"name\", \"home-outline\"], [\"class\", \"legend glass-effect\", 4, \"ngIf\"], [\"id\", \"map\", 1, \"map-container\"], [\"class\", \"loading-overlay\", 4, \"ngIf\"], [\"size\", \"small\", 1, \"layer-btn\", 3, \"fill\", \"click\"], [\"slot\", \"icon-only\", 3, \"name\"], [1, \"legend\", \"glass-effect\"], [1, \"legend-header\"], [\"name\", \"information-circle-outline\"], [1, \"legend-content\"], [\"class\", \"legend-item\", 4, \"ngIf\"], [1, \"legend-item\"], [1, \"legend-color\", \"temp-scale\"], [1, \"legend-color\", \"precip-scale\"], [1, \"legend-color\", \"pressure-scale\"], [1, \"legend-color\", \"wind-scale\"], [1, \"legend-color\", \"clouds-scale\"], [1, \"loading-overlay\"], [\"name\", \"crescent\"]],\n        template: function MapasPage_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n            i0.ɵɵelement(3, \"ion-back-button\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"ion-title\")(5, \"div\", 3);\n            i0.ɵɵelement(6, \"ion-icon\", 4);\n            i0.ɵɵtext(7, \" Mapas Meteorol\\u00F3gicos \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(8, \"ion-buttons\", 5)(9, \"ion-button\", 6);\n            i0.ɵɵlistener(\"click\", function MapasPage_Template_ion_button_click_9_listener() {\n              return ctx.getCurrentLocation();\n            });\n            i0.ɵɵelement(10, \"ion-icon\", 7);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(11, \"ion-content\", 8)(12, \"div\", 9)(13, \"div\", 10);\n            i0.ɵɵelement(14, \"ion-icon\", 11);\n            i0.ɵɵelementStart(15, \"span\");\n            i0.ɵɵtext(16);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(17, \"div\", 12);\n            i0.ɵɵtemplate(18, MapasPage_ion_button_18_Template, 2, 2, \"ion-button\", 13);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(19, \"div\", 14)(20, \"ion-button\", 15);\n            i0.ɵɵlistener(\"click\", function MapasPage_Template_ion_button_click_20_listener() {\n              return ctx.zoomToBrazil();\n            });\n            i0.ɵɵelement(21, \"ion-icon\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"ion-button\", 15);\n            i0.ɵɵlistener(\"click\", function MapasPage_Template_ion_button_click_22_listener() {\n              return ctx.getCurrentLocation();\n            });\n            i0.ɵɵelement(23, \"ion-icon\", 7);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(24, MapasPage_div_24_Template, 11, 5, \"div\", 17);\n            i0.ɵɵelement(25, \"div\", 18);\n            i0.ɵɵtemplate(26, MapasPage_div_26_Template, 4, 0, \"div\", 19);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"translucent\", true);\n            i0.ɵɵadvance(11);\n            i0.ɵɵproperty(\"fullscreen\", true);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate(ctx.getCurrentLayerName());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.layerOptions);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngIf\", ctx.currentLayer);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !ctx.map);\n          }\n        },\n        dependencies: [i2.NgForOf, i2.NgIf, i3.IonButton, i3.IonButtons, i3.IonContent, i3.IonHeader, i3.IonIcon, i3.IonSpinner, i3.IonTitle, i3.IonToolbar, i3.IonBackButton],\n        styles: [\"@charset \\\"UTF-8\\\";.custom-header[_ngcontent-%COMP%]   ion-toolbar[_ngcontent-%COMP%]{--background: var(--ion-color-primary);--color: var(--ion-color-primary-contrast)}.custom-header[_ngcontent-%COMP%]   .header-title[_ngcontent-%COMP%]{display:flex;align-items:center;gap:8px}.custom-header[_ngcontent-%COMP%]   .header-title[_ngcontent-%COMP%]   .header-icon[_ngcontent-%COMP%]{font-size:1.2em}.map-container[_ngcontent-%COMP%]{height:100%;width:100%;position:absolute;top:0;left:0;z-index:1}.layer-controls[_ngcontent-%COMP%]{position:absolute;top:16px;right:16px;z-index:2;padding:12px;border-radius:8px;background:rgba(var(--ion-background-color-rgb),.9);box-shadow:0 2px 8px #0003}.layer-controls[_ngcontent-%COMP%]   .layer-header[_ngcontent-%COMP%]{display:flex;align-items:center;gap:8px;margin-bottom:8px}.layer-controls[_ngcontent-%COMP%]   .layer-header[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:1.2em}.layer-controls[_ngcontent-%COMP%]   .layer-buttons[_ngcontent-%COMP%]{display:flex;gap:8px;flex-wrap:wrap}.layer-controls[_ngcontent-%COMP%]   .layer-buttons[_ngcontent-%COMP%]   .layer-btn[_ngcontent-%COMP%]{--padding-start: 8px;--padding-end: 8px}.navigation-controls[_ngcontent-%COMP%]{position:absolute;bottom:24px;right:16px;z-index:2;padding:8px;border-radius:8px;background:rgba(var(--ion-background-color-rgb),.9);box-shadow:0 2px 8px #0003;display:flex;flex-direction:column;gap:8px}.navigation-controls[_ngcontent-%COMP%]   .nav-btn[_ngcontent-%COMP%]{margin:0;--padding-start: 8px;--padding-end: 8px}.legend[_ngcontent-%COMP%]{position:absolute;bottom:24px;left:16px;z-index:2;padding:12px;border-radius:8px;background:rgba(var(--ion-background-color-rgb),.9);box-shadow:0 2px 8px #0003;min-width:200px}.legend[_ngcontent-%COMP%]   .legend-header[_ngcontent-%COMP%]{display:flex;align-items:center;gap:8px;margin-bottom:8px;font-weight:500}.legend[_ngcontent-%COMP%]   .legend-header[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:1.2em}.legend[_ngcontent-%COMP%]   .legend-content[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]{display:flex;align-items:center;gap:8px;margin-bottom:4px}.legend[_ngcontent-%COMP%]   .legend-content[_ngcontent-%COMP%]   .legend-item[_ngcontent-%COMP%]   .legend-color[_ngcontent-%COMP%]{width:24px;height:12px;border-radius:2px}.temp-scale[_ngcontent-%COMP%]{background:linear-gradient(to right,#2b83ba,#abdda4,#ffffbf,#fdae61,#d7191c)}.precip-scale[_ngcontent-%COMP%]{background:linear-gradient(to right,#f7fbff,#deebf7,#c6dbef,#9ecae1,#6baed6,#4292c6,#2171b5,#084594)}.pressure-scale[_ngcontent-%COMP%]{background:linear-gradient(to right,#8c510a,#d8b365,#f6e8c3,#c7eae5,#5ab4ac,#01665e)}.wind-scale[_ngcontent-%COMP%]{background:linear-gradient(to right,#ffeda0,#feb24c,#f03b20)}.clouds-scale[_ngcontent-%COMP%]{background:linear-gradient(to right,#f7f7f7,#cccccc,#969696,#636363,#252525)}.loading-overlay[_ngcontent-%COMP%]{position:absolute;inset:0;z-index:3;display:flex;flex-direction:column;justify-content:center;align-items:center;background:rgba(var(--ion-background-color-rgb),.8);gap:16px}.loading-overlay[_ngcontent-%COMP%]   ion-spinner[_ngcontent-%COMP%]{width:48px;height:48px}.glass-effect[_ngcontent-%COMP%]{backdrop-filter:blur(8px);-webkit-backdrop-filter:blur(8px);border:1px solid rgba(255,255,255,.1)}\"]\n      });\n    }\n  }\n  return MapasPage;\n})();\nexport { MapasPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}