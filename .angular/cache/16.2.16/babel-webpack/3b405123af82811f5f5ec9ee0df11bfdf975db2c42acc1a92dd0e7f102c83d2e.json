{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet ClimaService = /*#__PURE__*/(() => {\n  class ClimaService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.apiKey = environment.apiKey;\n      /**\n       * Busca o clima atual de uma cidade\n       * @param cidade Nome da cidade para buscar o clima\n       */\n      // Dados mock para teste\n      this.mockClimaAtual = {\n        cidade: 'São Paulo',\n        temperatura: 22.5,\n        descricao: 'céu limpo',\n        icone: '01d',\n        umidade: 65,\n        pressao: 1015,\n        velocidadeVento: 3.5,\n        direcaoVento: 180,\n        sensacaoTermica: 23,\n        tempMin: 20,\n        tempMax: 25,\n        visibilidade: 10,\n        data: new Date()\n      };\n      /**\n       * Busca a previsão do tempo para 5 dias\n       * @param cidade Nome da cidade para buscar a previsão\n       */\n      // Dados mock para previsão\n      this.mockPrevisao5Dias = [{\n        data: new Date(),\n        temperatura: 22.5,\n        descricao: 'céu limpo',\n        icone: '01d',\n        probabilidadeChuva: 0,\n        umidade: 65\n      }, {\n        data: new Date(Date.now() + 86400000),\n        temperatura: 23.8,\n        descricao: 'parcialmente nublado',\n        icone: '02d',\n        probabilidadeChuva: 20,\n        umidade: 70\n      }, {\n        data: new Date(Date.now() + 2 * 86400000),\n        temperatura: 21.2,\n        descricao: 'chuva leve',\n        icone: '10d',\n        probabilidadeChuva: 60,\n        umidade: 75\n      }, {\n        data: new Date(Date.now() + 3 * 86400000),\n        temperatura: 20.5,\n        descricao: 'nublado',\n        icone: '04d',\n        probabilidadeChuva: 30,\n        umidade: 72\n      }, {\n        data: new Date(Date.now() + 4 * 86400000),\n        temperatura: 24.1,\n        descricao: 'céu limpo',\n        icone: '01d',\n        probabilidadeChuva: 0,\n        umidade: 68\n      }];\n    }\n    getClimaAtual(cidade) {\n      // Usando dados mock para teste\n      return of(this.mockClimaAtual).pipe(map(clima => ({\n        ...clima,\n        cidade: cidade // Atualiza a cidade com a solicitada\n      })));\n    }\n    getPrevisao5Dias(cidade) {\n      // Usando dados mock para teste\n      return of(this.mockPrevisao5Dias);\n    }\n    /**\n     * Busca dados brutos da previsão para 5 dias (para página de forecast)\n     * @param cidade Nome da cidade para buscar a previsão\n     */\n    getPrevisao5DiasRaw(cidade) {\n      // Retorna os dados mock em formato raw\n      return of({\n        city: {\n          name: cidade\n        },\n        list: this.mockPrevisao5Dias.map(p => ({\n          dt: p.data.getTime() / 1000,\n          main: {\n            temp: p.temperatura,\n            humidity: p.umidade\n          },\n          weather: [{\n            description: p.descricao,\n            icon: p.icone\n          }],\n          pop: p.probabilidadeChuva / 100\n        }))\n      });\n    }\n    /**\n     * Busca o clima por geolocalização\n     * @param lat Latitude\n     * @param lon Longitude\n     */\n    getClimaPorGeolocalizacao(lat, lon) {\n      // Usando dados mock para teste com coordenadas\n      return of({\n        ...this.mockClimaAtual,\n        cidade: `Local (${lat.toFixed(2)}, ${lon.toFixed(2)})`\n      });\n    }\n    static {\n      this.ɵfac = function ClimaService_Factory(t) {\n        return new (t || ClimaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ClimaService,\n        factory: ClimaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ClimaService;\n})();\nexport { ClimaService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}