{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/fabio/Desktop/Projetos de Marlon Desenvolvimento Mobile/climaja-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomePage = class HomePage {\n  constructor(climaService, historicoService, router, loadingController, alertController) {\n    this.climaService = climaService;\n    this.historicoService = historicoService;\n    this.router = router;\n    this.loadingController = loadingController;\n    this.alertController = alertController;\n    // Propriedades para busca\n    this.cidade = '';\n    this.sugestoes = [];\n    // Dados do clima atual\n    this.climaAtual = null;\n    // Estados da aplicação\n    this.carregando = false;\n    this.erro = '';\n    // Cache de cidades para sugestões\n    this.cidadesCache = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Brasília', 'Curitiba', 'Fortaleza', 'Recife', 'Porto Alegre', 'Manaus', 'Belém', 'Goiânia', 'Guarulhos', 'Campinas', 'São Luís', 'São Gonçalo', 'Maceió', 'Duque de Caxias', 'Campo Grande', 'Natal', 'Teresina', 'São Bernardo do Campo'];\n  }\n  ngOnInit() {\n    // Página inicial carregada\n  }\n  // Buscar clima por cidade\n  buscarClima() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Método buscarClima chamado com cidade:', _this.cidade);\n      if (!_this.cidade || !_this.cidade.trim()) {\n        _this.mostrarErro('Por favor, digite o nome de uma cidade');\n        return;\n      }\n      _this.carregando = true;\n      _this.erro = '';\n      _this.climaAtual = null;\n      try {\n        _this.sugestoes = [];\n        _this.climaService.getClima(_this.cidade.trim()).subscribe({\n          next: clima => {\n            console.log('Dados do clima recebidos:', clima);\n            _this.climaAtual = clima;\n            // Salvar no histórico usando o serviço\n            _this.historicoService.adicionarHistorico({\n              cidade: clima.name || _this.cidade,\n              temperatura: clima.main.temp,\n              descricao: clima.weather[0].description,\n              data: new Date().toISOString(),\n              icone: clima.weather[0].icon\n            });\n            _this.carregando = false;\n            console.log('Busca concluída com sucesso');\n          },\n          error: error => {\n            console.error('Erro ao buscar clima:', error);\n            _this.erro = 'Cidade não encontrada. Verifique o nome e tente novamente.';\n            _this.carregando = false;\n            _this.climaAtual = null;\n          }\n        });\n      } catch (error) {\n        console.error('Erro inesperado:', error);\n        _this.erro = 'Erro inesperado. Tente novamente.';\n        _this.carregando = false;\n        _this.climaAtual = null;\n      }\n    })();\n  }\n  // Navegar para detalhes\n  verDetalhes() {\n    if (this.climaAtual) {\n      this.router.navigate(['/detalhes-clima'], {\n        queryParams: {\n          cidade: this.climaAtual.name\n        }\n      });\n    }\n  }\n  // Mostrar erro\n  mostrarErro(mensagem) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this2.alertController.create({\n        header: 'Erro',\n        message: mensagem,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  // Obter URL do ícone do clima\n  getIconeClima(icone) {\n    return `https://openweathermap.org/img/wn/${icone}@2x.png`;\n  }\n  // Manipular entrada de busca e gerar sugestões\n  onSearchInput(event) {\n    console.log('Evento ionInput:', event);\n    const value = (event.target.value || '').trim().toLowerCase();\n    console.log('Valor do input:', value);\n    if (value === '') {\n      this.climaAtual = null;\n      this.erro = '';\n      this.sugestoes = [];\n      return;\n    }\n    // Filtrar sugestões do cache de cidades\n    this.sugestoes = this.cidadesCache.filter(cidade => cidade.toLowerCase().includes(value)).slice(0, 5); // Limitar a 5 sugestões\n    console.log('Sugestões:', this.sugestoes);\n  }\n  // Selecionar sugestão\n  selecionarSugestao(cidade) {\n    this.cidade = cidade;\n    this.sugestoes = [];\n    this.buscarClima();\n  }\n};\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss']\n})], HomePage);\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}