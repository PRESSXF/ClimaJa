{"ast":null,"code":"import { throwError, interval, of } from 'rxjs';\nimport { catchError, retry, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet ClimaService = /*#__PURE__*/(() => {\n  class ClimaService {\n    constructor(http) {\n      this.http = http;\n      this.apiKey = '0493ba0aca663cf9a780f6bf65b6af69';\n      this.apiUrl = 'https://api.openweathermap.org/data/2.5';\n      this.geoApiUrl = 'http://api.openweathermap.org/geo/1.0/direct';\n      this.climaCache = {}; // Cache para os dados do clima\n    }\n    // Buscar clima atual por cidade\n    getClima(cidade) {\n      if (this.climaCache[cidade]) {\n        // Se a cidade estiver em cache, retorna os dados do cache\n        console.log(`Dados do clima para ${cidade} obtidos do cache.`);\n        return of(this.climaCache[cidade]);\n      }\n      const url = `${this.apiUrl}/weather?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br}`;\n      return interval(60000).pipe(\n      // Update every 60 seconds\n      switchMap(() => this.http.get(url).pipe(retry(2), catchError(this.handleError))));\n    }\n    // Buscar previsão de 5 dias por cidade\n    getPrevisao(cidade) {\n      const url = `${this.apiUrl}/forecast?q=${cidade}&appid=${this.apiKey}&units=metric&lang=pt_br}`;\n      return this.http.get(url).pipe(retry(2), catchError(this.handleError));\n    }\n    // Buscar sugestões de cidades\n    getSugestoes(cidade) {\n      const url = `${this.geoApiUrl}?q=${cidade}&limit=5&appid=${this.apiKey}`;\n      return this.http.get(url).pipe(retry(2), catchError(this.handleError));\n    }\n    // Tratamento de erros\n    handleError(error) {\n      let errorMessage = 'Erro desconhecido';\n      if (error.error instanceof ErrorEvent) {\n        // Erro do lado do cliente\n        errorMessage = `Erro: ${error.error.message}`;\n      } else {\n        // Erro do lado do servidor\n        switch (error.status) {\n          case 404:\n            errorMessage = 'Cidade não encontrada';\n            break;\n          case 401:\n            errorMessage = 'Chave da API inválida';\n            break;\n          case 429:\n            errorMessage = 'Muitas requisições. Tente novamente em alguns minutos';\n            break;\n          case 0:\n            errorMessage = 'Erro de conexão. Verifique sua internet';\n            break;\n          default:\n            errorMessage = `Erro do servidor: ${error.status}`;\n        }\n      }\n      console.error('Erro no serviço de clima:', error);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function ClimaService_Factory(t) {\n        return new (t || ClimaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ClimaService,\n        factory: ClimaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ClimaService;\n})();\nexport { ClimaService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}