{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let HighlightDirective = /*#__PURE__*/(() => {\n  class HighlightDirective {\n    constructor(el) {\n      this.el = el;\n      this.corDestaque = 'yellow';\n      this.corOriginal = '';\n      // Salva a cor de fundo original\n      this.corOriginal = el.nativeElement.style.backgroundColor;\n    }\n    /**\r\n     * Evento quando o mouse passa por cima do elemento\r\n     */\n    onMouseEnter() {\n      this.highlight(this.corDestaque);\n    }\n    /**\r\n     * Evento quando o mouse sai do elemento\r\n     */\n    onMouseLeave() {\n      this.highlight(this.corOriginal);\n    }\n    /**\r\n     * Aplica o destaque ao elemento\r\n     * @param cor Cor a ser aplicada como destaque\r\n     */\n    highlight(cor) {\n      this.el.nativeElement.style.backgroundColor = cor;\n      // Ajusta a cor do texto para garantir contraste\n      if (cor !== this.corOriginal) {\n        this.el.nativeElement.style.transition = 'all 0.3s ease';\n        this.el.nativeElement.style.color = this.getContrasteTexto(cor);\n      } else {\n        this.el.nativeElement.style.color = '';\n      }\n    }\n    /**\r\n     * Calcula a cor do texto para melhor contraste\r\n     * @param corFundo Cor de fundo\r\n     * @returns Cor do texto (preto ou branco)\r\n     */\n    getContrasteTexto(corFundo) {\n      // Converte cores comuns para RGB\n      const cores = {\n        'yellow': [255, 255, 0],\n        'white': [255, 255, 255],\n        'black': [0, 0, 0]\n      };\n      let rgb = cores[corFundo.toLowerCase()] || [255, 255, 0]; // Padrão para amarelo\n      // Calcula luminosidade\n      const luminosidade = (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255;\n      return luminosidade > 0.5 ? '#000000' : '#FFFFFF';\n    }\n    static {\n      this.ɵfac = function HighlightDirective_Factory(t) {\n        return new (t || HighlightDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: HighlightDirective,\n        selectors: [[\"\", \"appHighlight\", \"\"]],\n        hostBindings: function HighlightDirective_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"mouseenter\", function HighlightDirective_mouseenter_HostBindingHandler() {\n              return ctx.onMouseEnter();\n            })(\"mouseleave\", function HighlightDirective_mouseleave_HostBindingHandler() {\n              return ctx.onMouseLeave();\n            });\n          }\n        },\n        inputs: {\n          corDestaque: [\"appHighlight\", \"corDestaque\"]\n        }\n      });\n    }\n  }\n  return HighlightDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}