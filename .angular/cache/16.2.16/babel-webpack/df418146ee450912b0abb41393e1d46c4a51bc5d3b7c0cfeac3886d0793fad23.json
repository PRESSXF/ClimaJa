{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/clima.service\";\nimport * as i2 from \"@ionic/angular\";\n// Corrigir ícones do Leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'assets/leaflet/marker-icon-2x.png',\n  iconUrl: 'assets/leaflet/marker-icon.png',\n  shadowUrl: 'assets/leaflet/marker-shadow.png'\n});\nlet MapasPage = /*#__PURE__*/(() => {\n  class MapasPage {\n    constructor(climaService) {\n      this.climaService = climaService;\n      this.currentLayer = 'temp';\n      // Opções de camadas meteorológicas\n      this.layerOptions = [{\n        key: 'temp',\n        name: 'Temperatura',\n        icon: 'thermometer-outline'\n      }, {\n        key: 'precipitation',\n        name: 'Precipitação',\n        icon: 'rainy-outline'\n      }, {\n        key: 'pressure',\n        name: 'Pressão',\n        icon: 'speedometer-outline'\n      }, {\n        key: 'wind',\n        name: 'Vento',\n        icon: 'flag-outline'\n      }, {\n        key: 'clouds',\n        name: 'Nuvens',\n        icon: 'cloud-outline'\n      }];\n    }\n    ngAfterViewInit() {\n      // Aguardar um pouco para garantir que o DOM esteja pronto\n      setTimeout(() => {\n        this.initMap();\n      }, 100);\n    }\n    ngOnDestroy() {\n      if (this.map) {\n        this.map.remove();\n      }\n    }\n    initMap() {\n      try {\n        // Inicializar o mapa centrado no Brasil\n        this.map = L.map('map', {\n          center: [-15.7942, -47.8822],\n          zoom: 5,\n          zoomControl: true,\n          attributionControl: true\n        });\n        // Camada base OpenStreetMap\n        const baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n          attribution: '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18\n        });\n        baseLayer.addTo(this.map);\n        // Adicionar camada meteorológica inicial\n        this.addWeatherLayer(this.currentLayer);\n        // Adicionar alguns marcadores de exemplo para cidades importantes\n        this.addCityMarkers();\n        // Forçar redimensionamento do mapa\n        setTimeout(() => {\n          if (this.map) {\n            this.map.invalidateSize();\n          }\n        }, 200);\n      } catch (error) {\n        console.error('Erro ao inicializar o mapa:', error);\n      }\n    }\n    addWeatherLayer(layerType) {\n      if (!this.map) return;\n      // Remover camada anterior se existir\n      if (this.weatherLayer) {\n        this.map.removeLayer(this.weatherLayer);\n      }\n      // URLs das camadas meteorológicas do OpenWeatherMap\n      const layerUrls = {\n        temp: 'temp_new',\n        precipitation: 'precipitation_new',\n        pressure: 'pressure_new',\n        wind: 'wind_new',\n        clouds: 'clouds_new'\n      };\n      const layerUrl = layerUrls[layerType] || 'temp_new';\n      // Usar a API do OpenWeatherMap para camadas meteorológicas\n      this.weatherLayer = L.tileLayer(`https://tile.openweathermap.org/map/${layerUrl}/{z}/{x}/{y}.png?appid=0493ba0aca663cf9a780f6bf65b6af69`, {\n        opacity: 0.6,\n        attribution: 'Dados meteorológicos © <a href=\"https://openweathermap.org/\">OpenWeatherMap</a>',\n        maxZoom: 18\n      });\n      this.weatherLayer.addTo(this.map);\n    }\n    addCityMarkers() {\n      if (!this.map) return;\n      const cities = [{\n        name: 'São Paulo',\n        lat: -23.5505,\n        lng: -46.6333\n      }, {\n        name: 'Rio de Janeiro',\n        lat: -22.9068,\n        lng: -43.1729\n      }, {\n        name: 'Brasília',\n        lat: -15.7942,\n        lng: -47.8822\n      }, {\n        name: 'Salvador',\n        lat: -12.9714,\n        lng: -38.5014\n      }, {\n        name: 'Fortaleza',\n        lat: -3.7319,\n        lng: -38.5267\n      }, {\n        name: 'Belo Horizonte',\n        lat: -19.9191,\n        lng: -43.9386\n      }, {\n        name: 'Manaus',\n        lat: -3.1190,\n        lng: -60.0217\n      }, {\n        name: 'Curitiba',\n        lat: -25.4284,\n        lng: -49.2733\n      }];\n      cities.forEach(city => {\n        const marker = L.marker([city.lat, city.lng]).bindPopup(`<b>${city.name}</b><br>Clique para ver o clima`).on('click', () => {\n          this.showCityWeather(city.name);\n        });\n        marker.addTo(this.map);\n      });\n    }\n    showCityWeather(cityName) {\n      // Implementar popup com informações do clima da cidade\n      console.log(`Mostrando clima para: ${cityName}`);\n    }\n    changeLayer(layerType) {\n      this.currentLayer = layerType;\n      this.addWeatherLayer(layerType);\n    }\n    getCurrentLayerName() {\n      const layer = this.layerOptions.find(l => l.key === this.currentLayer);\n      return layer ? layer.name : 'Temperatura';\n    }\n    zoomToBrazil() {\n      if (this.map) {\n        this.map.setView([-15.7942, -47.8822], 5);\n      }\n    }\n    getCurrentLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const lat = position.coords.latitude;\n          const lng = position.coords.longitude;\n          if (this.map) {\n            this.map.setView([lat, lng], 10);\n            L.marker([lat, lng]).bindPopup('Sua localização atual').addTo(this.map).openPopup();\n          }\n        }, error => {\n          console.error('Erro ao obter localização:', error);\n        });\n      }\n    }\n    static {\n      this.ɵfac = function MapasPage_Factory(t) {\n        return new (t || MapasPage)(i0.ɵɵdirectiveInject(i1.ClimaService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapasPage,\n        selectors: [[\"app-mapas\"]],\n        decls: 6,\n        vars: 0,\n        consts: [[\"id\", \"map\", 2, \"height\", \"100%\", \"width\", \"100%\"]],\n        template: function MapasPage_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n            i0.ɵɵtext(3, \"Mapas Meteorol\\u00F3gicos\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(4, \"ion-content\");\n            i0.ɵɵelement(5, \"div\", 0);\n            i0.ɵɵelementEnd();\n          }\n        },\n        dependencies: [i2.IonContent, i2.IonHeader, i2.IonTitle, i2.IonToolbar],\n        styles: [\"@charset \\\"UTF-8\\\";#map[_ngcontent-%COMP%]{height:100%;width:100%}\"]\n      });\n    }\n  }\n  return MapasPage;\n})();\nexport { MapasPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}