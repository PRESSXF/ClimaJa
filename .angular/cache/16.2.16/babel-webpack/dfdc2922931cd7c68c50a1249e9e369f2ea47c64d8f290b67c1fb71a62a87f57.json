{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/fabio/Desktop/Projetos de Marlon Desenvolvimento Mobile/climaja-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nlet LocalizacaoService = /*#__PURE__*/(() => {\n  class LocalizacaoService {\n    constructor() {\n      this.CURRENT_LOCATION_KEY = 'current_location';\n    }\n    /**\n     * Obtém a localização atual do usuário usando a API de Geolocalização\n     * @returns Observable com as coordenadas (latitude e longitude)\n     */\n    obterLocalizacaoAtual() {\n      return from(new Promise((resolve, reject) => {\n        if (!navigator.geolocation) {\n          reject(new Error('Geolocalização não suportada pelo navegador'));\n        }\n        navigator.geolocation.getCurrentPosition(position => resolve(position), error => reject(error), {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0\n        });\n      })).pipe(map(position => ({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      })));\n    }\n    /**\n     * Define a cidade atual no localStorage\n     * @param cidade Nome da cidade a ser definida como atual\n     */\n    definirLocalizacaoAtual(cidade) {\n      localStorage.setItem(this.CURRENT_LOCATION_KEY, cidade);\n    }\n    /**\n     * Obtém a cidade atual do localStorage\n     * @returns Nome da cidade atual ou null se não estiver definida\n     */\n    obterLocalizacaoAtualSalva() {\n      const cidade = localStorage.getItem(this.CURRENT_LOCATION_KEY);\n      return of(cidade);\n    }\n    /**\n     * Remove a cidade atual do localStorage\n     */\n    removerLocalizacaoAtual() {\n      localStorage.removeItem(this.CURRENT_LOCATION_KEY);\n    }\n    /**\n     * Verifica se o serviço de geolocalização está disponível\n     * @returns boolean indicando se o serviço está disponível\n     */\n    isGeolocationDisponivel() {\n      return 'geolocation' in navigator;\n    }\n    /**\n     * Solicita permissão para usar a geolocalização\n     * @returns Promise que resolve quando a permissão é concedida\n     */\n    solicitarPermissao() {\n      return _asyncToGenerator(function* () {\n        if ('permissions' in navigator) {\n          const permission = yield navigator.permissions.query({\n            name: 'geolocation'\n          });\n          return permission.state;\n        }\n        return 'prompt';\n      })();\n    }\n    static {\n      this.ɵfac = function LocalizacaoService_Factory(t) {\n        return new (t || LocalizacaoService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LocalizacaoService,\n        factory: LocalizacaoService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LocalizacaoService;\n})();\nexport { LocalizacaoService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}