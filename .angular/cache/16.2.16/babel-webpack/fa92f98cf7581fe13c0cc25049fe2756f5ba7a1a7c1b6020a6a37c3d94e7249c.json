{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let HistoricoService = /*#__PURE__*/(() => {\n  class HistoricoService {\n    constructor() {\n      this.STORAGE_KEY = 'climaja_historico';\n    }\n    /**\r\n     * Adiciona uma nova busca ao histórico\r\n     * @param item Dados da busca realizada\r\n     */\n    adicionarAoHistorico(item) {\n      let historico = this.obterHistorico();\n      // Remove item duplicado se existir (mesma cidade)\n      historico = historico.filter(h => h.cidade.toLowerCase() !== item.cidade.toLowerCase());\n      // Adiciona o novo item no início da lista\n      historico.unshift(item);\n      // Mantém apenas os últimos 50 itens\n      if (historico.length > 50) {\n        historico = historico.slice(0, 50);\n      }\n      // Salva no localStorage\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historico));\n    }\n    /**\r\n     * Obtém todo o histórico de buscas\r\n     * @returns Array com o histórico de buscas\r\n     */\n    obterHistorico() {\n      const historico = localStorage.getItem(this.STORAGE_KEY);\n      if (historico) {\n        return JSON.parse(historico).map(item => ({\n          ...item,\n          data: new Date(item.data)\n        }));\n      }\n      return [];\n    }\n    /**\r\n     * Limpa todo o histórico\r\n     */\n    limparHistorico() {\n      localStorage.removeItem(this.STORAGE_KEY);\n    }\n    /**\r\n     * Remove um item específico do histórico\r\n     * @param index Índice do item a ser removido\r\n     */\n    removerItem(index) {\n      const historico = this.obterHistorico();\n      if (index >= 0 && index < historico.length) {\n        historico.splice(index, 1);\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historico));\n      }\n    }\n    /**\r\n     * Obtém o histórico paginado\r\n     * @param pagina Número da página (começando em 1)\r\n     * @param itensPorPagina Quantidade de itens por página\r\n     * @returns Objeto com os itens da página e informações de paginação\r\n     */\n    obterHistoricoPaginado(pagina = 1, itensPorPagina = 10) {\n      const historico = this.obterHistorico();\n      const totalItens = historico.length;\n      const totalPaginas = Math.ceil(totalItens / itensPorPagina);\n      const inicio = (pagina - 1) * itensPorPagina;\n      const fim = inicio + itensPorPagina;\n      const itens = historico.slice(inicio, fim);\n      return {\n        itens,\n        paginaAtual: pagina,\n        totalPaginas,\n        totalItens,\n        temProximaPagina: pagina < totalPaginas,\n        temPaginaAnterior: pagina > 1\n      };\n    }\n    static {\n      this.ɵfac = function HistoricoService_Factory(t) {\n        return new (t || HistoricoService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: HistoricoService,\n        factory: HistoricoService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return HistoricoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}